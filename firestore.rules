rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check if the user is an admin by looking up their role in the 'users' collection.
      // This is a secure way to check for admin privileges.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow users to read and update their own profile data.
    // New users can be created during signup.
    // Admins can read or write any user's document.
    match /users/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null;
      allow delete, list: if isAdmin();
    }
    
    // Allow any authenticated user to read the list of cities for search dropdowns.
    // Only admins can add, edit, or delete cities.
    match /Cities/{cityId} {
      allow read: if request.auth != null;
      allow write, delete: if isAdmin();
    }
    
    // Allow authenticated server-side functions (like Genkit flows) to read API keys,
    // but restrict client-side read access and all write access to admins.
    match /APIKeys/{keyId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
    
    // Allow any authenticated user (via server-side flow) to read and write
    // influencer data to the cache. This is safe because it's triggered
    // by an authenticated user action.
    match /influencers/{city}/{platform}/{influencerId} {
      allow read, write: if request.auth != null;
    }

    // Allow a client to create an OTP document for their own email.
    // This is used for email verification during signup.
    match /otp/{email} {
      allow create: if request.resource.data.email == email;
      // Deny all other client operations for security.
      allow read, update, delete: if false;
    }
  }
}
